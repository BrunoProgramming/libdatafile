// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logserver.proto

#ifndef PROTOBUF_logserver_2eproto__INCLUDED
#define PROTOBUF_logserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mearec {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_logserver_2eproto();
void protobuf_AssignDesc_logserver_2eproto();
void protobuf_ShutdownFile_logserver_2eproto();

class RecordingStatusRequest;
class RecordingParamsReply;

enum RecordingParamsReply_StatusType {
  RecordingParamsReply_StatusType_RUNNING = 0,
  RecordingParamsReply_StatusType_STOPPED = 1,
  RecordingParamsReply_StatusType_ERROR = 2
};
bool RecordingParamsReply_StatusType_IsValid(int value);
const RecordingParamsReply_StatusType RecordingParamsReply_StatusType_StatusType_MIN = RecordingParamsReply_StatusType_RUNNING;
const RecordingParamsReply_StatusType RecordingParamsReply_StatusType_StatusType_MAX = RecordingParamsReply_StatusType_ERROR;
const int RecordingParamsReply_StatusType_StatusType_ARRAYSIZE = RecordingParamsReply_StatusType_StatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecordingParamsReply_StatusType_descriptor();
inline const ::std::string& RecordingParamsReply_StatusType_Name(RecordingParamsReply_StatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecordingParamsReply_StatusType_descriptor(), value);
}
inline bool RecordingParamsReply_StatusType_Parse(
    const ::std::string& name, RecordingParamsReply_StatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecordingParamsReply_StatusType>(
    RecordingParamsReply_StatusType_descriptor(), name, value);
}
// ===================================================================

class RecordingStatusRequest : public ::google::protobuf::Message {
 public:
  RecordingStatusRequest();
  virtual ~RecordingStatusRequest();

  RecordingStatusRequest(const RecordingStatusRequest& from);

  inline RecordingStatusRequest& operator=(const RecordingStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordingStatusRequest& default_instance();

  void Swap(RecordingStatusRequest* other);

  // implements Message ----------------------------------------------

  RecordingStatusRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordingStatusRequest& from);
  void MergeFrom(const RecordingStatusRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // optional bool type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline bool type() const;
  inline void set_type(bool value);

  // optional bool filename = 3;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 3;
  inline bool filename() const;
  inline void set_filename(bool value);

  // optional bool length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline bool length() const;
  inline void set_length(bool value);

  // optional bool nsamples = 5;
  inline bool has_nsamples() const;
  inline void clear_nsamples();
  static const int kNsamplesFieldNumber = 5;
  inline bool nsamples() const;
  inline void set_nsamples(bool value);

  // optional bool nchannels = 6;
  inline bool has_nchannels() const;
  inline void clear_nchannels();
  static const int kNchannelsFieldNumber = 6;
  inline bool nchannels() const;
  inline void set_nchannels(bool value);

  // optional bool lastValidSample = 7;
  inline bool has_lastvalidsample() const;
  inline void clear_lastvalidsample();
  static const int kLastValidSampleFieldNumber = 7;
  inline bool lastvalidsample() const;
  inline void set_lastvalidsample(bool value);

  // optional bool blockSize = 8;
  inline bool has_blocksize() const;
  inline void clear_blocksize();
  static const int kBlockSizeFieldNumber = 8;
  inline bool blocksize() const;
  inline void set_blocksize(bool value);

  // optional bool sampleRate = 9;
  inline bool has_samplerate() const;
  inline void clear_samplerate();
  static const int kSampleRateFieldNumber = 9;
  inline bool samplerate() const;
  inline void set_samplerate(bool value);

  // optional bool gain = 10;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 10;
  inline bool gain() const;
  inline void set_gain(bool value);

  // optional bool offset = 11;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 11;
  inline bool offset() const;
  inline void set_offset(bool value);

  // optional bool date = 12;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 12;
  inline bool date() const;
  inline void set_date(bool value);

  // optional bool time = 13;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 13;
  inline bool time() const;
  inline void set_time(bool value);

  // @@protoc_insertion_point(class_scope:mearec.RecordingStatusRequest)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_nsamples();
  inline void clear_has_nsamples();
  inline void set_has_nchannels();
  inline void clear_has_nchannels();
  inline void set_has_lastvalidsample();
  inline void clear_has_lastvalidsample();
  inline void set_has_blocksize();
  inline void clear_has_blocksize();
  inline void set_has_samplerate();
  inline void clear_has_samplerate();
  inline void set_has_gain();
  inline void clear_has_gain();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 size_;
  bool type_;
  bool filename_;
  bool length_;
  bool nsamples_;
  bool nchannels_;
  bool lastvalidsample_;
  bool blocksize_;
  bool samplerate_;
  bool gain_;
  bool offset_;
  bool date_;
  bool time_;
  friend void  protobuf_AddDesc_logserver_2eproto();
  friend void protobuf_AssignDesc_logserver_2eproto();
  friend void protobuf_ShutdownFile_logserver_2eproto();

  void InitAsDefaultInstance();
  static RecordingStatusRequest* default_instance_;
};
// -------------------------------------------------------------------

class RecordingParamsReply : public ::google::protobuf::Message {
 public:
  RecordingParamsReply();
  virtual ~RecordingParamsReply();

  RecordingParamsReply(const RecordingParamsReply& from);

  inline RecordingParamsReply& operator=(const RecordingParamsReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordingParamsReply& default_instance();

  void Swap(RecordingParamsReply* other);

  // implements Message ----------------------------------------------

  RecordingParamsReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordingParamsReply& from);
  void MergeFrom(const RecordingParamsReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RecordingParamsReply_StatusType StatusType;
  static const StatusType RUNNING = RecordingParamsReply_StatusType_RUNNING;
  static const StatusType STOPPED = RecordingParamsReply_StatusType_STOPPED;
  static const StatusType ERROR = RecordingParamsReply_StatusType_ERROR;
  static inline bool StatusType_IsValid(int value) {
    return RecordingParamsReply_StatusType_IsValid(value);
  }
  static const StatusType StatusType_MIN =
    RecordingParamsReply_StatusType_StatusType_MIN;
  static const StatusType StatusType_MAX =
    RecordingParamsReply_StatusType_StatusType_MAX;
  static const int StatusType_ARRAYSIZE =
    RecordingParamsReply_StatusType_StatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StatusType_descriptor() {
    return RecordingParamsReply_StatusType_descriptor();
  }
  static inline const ::std::string& StatusType_Name(StatusType value) {
    return RecordingParamsReply_StatusType_Name(value);
  }
  static inline bool StatusType_Parse(const ::std::string& name,
      StatusType* value) {
    return RecordingParamsReply_StatusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string filename = 3;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 3;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional double length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline double length() const;
  inline void set_length(double value);

  // optional uint32 nsamples = 5;
  inline bool has_nsamples() const;
  inline void clear_nsamples();
  static const int kNsamplesFieldNumber = 5;
  inline ::google::protobuf::uint32 nsamples() const;
  inline void set_nsamples(::google::protobuf::uint32 value);

  // optional uint32 nchannels = 6;
  inline bool has_nchannels() const;
  inline void clear_nchannels();
  static const int kNchannelsFieldNumber = 6;
  inline ::google::protobuf::uint32 nchannels() const;
  inline void set_nchannels(::google::protobuf::uint32 value);

  // optional uint32 lastValidSample = 7;
  inline bool has_lastvalidsample() const;
  inline void clear_lastvalidsample();
  static const int kLastValidSampleFieldNumber = 7;
  inline ::google::protobuf::uint32 lastvalidsample() const;
  inline void set_lastvalidsample(::google::protobuf::uint32 value);

  // optional uint32 blockSize = 8;
  inline bool has_blocksize() const;
  inline void clear_blocksize();
  static const int kBlockSizeFieldNumber = 8;
  inline ::google::protobuf::uint32 blocksize() const;
  inline void set_blocksize(::google::protobuf::uint32 value);

  // optional float sampleRate = 9;
  inline bool has_samplerate() const;
  inline void clear_samplerate();
  static const int kSampleRateFieldNumber = 9;
  inline float samplerate() const;
  inline void set_samplerate(float value);

  // optional float gain = 10;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 10;
  inline float gain() const;
  inline void set_gain(float value);

  // optional float offset = 11;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 11;
  inline float offset() const;
  inline void set_offset(float value);

  // optional string date = 12;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 12;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  inline void set_allocated_date(::std::string* date);

  // optional string time = 13;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 13;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // @@protoc_insertion_point(class_scope:mearec.RecordingParamsReply)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_nsamples();
  inline void clear_has_nsamples();
  inline void set_has_nchannels();
  inline void clear_has_nchannels();
  inline void set_has_lastvalidsample();
  inline void clear_has_lastvalidsample();
  inline void set_has_blocksize();
  inline void clear_has_blocksize();
  inline void set_has_samplerate();
  inline void clear_has_samplerate();
  inline void set_has_gain();
  inline void clear_has_gain();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::std::string* filename_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint32 nsamples_;
  double length_;
  ::google::protobuf::uint32 nchannels_;
  ::google::protobuf::uint32 lastvalidsample_;
  ::google::protobuf::uint32 blocksize_;
  float samplerate_;
  float gain_;
  float offset_;
  ::std::string* date_;
  ::std::string* time_;
  friend void  protobuf_AddDesc_logserver_2eproto();
  friend void protobuf_AssignDesc_logserver_2eproto();
  friend void protobuf_ShutdownFile_logserver_2eproto();

  void InitAsDefaultInstance();
  static RecordingParamsReply* default_instance_;
};
// ===================================================================


// ===================================================================

// RecordingStatusRequest

// required uint32 size = 1;
inline bool RecordingStatusRequest::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordingStatusRequest::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordingStatusRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordingStatusRequest::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 RecordingStatusRequest::size() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingStatusRequest.size)
  return size_;
}
inline void RecordingStatusRequest::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingStatusRequest.size)
}

// optional bool type = 2;
inline bool RecordingStatusRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordingStatusRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordingStatusRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordingStatusRequest::clear_type() {
  type_ = false;
  clear_has_type();
}
inline bool RecordingStatusRequest::type() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingStatusRequest.type)
  return type_;
}
inline void RecordingStatusRequest::set_type(bool value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingStatusRequest.type)
}

// optional bool filename = 3;
inline bool RecordingStatusRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordingStatusRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordingStatusRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordingStatusRequest::clear_filename() {
  filename_ = false;
  clear_has_filename();
}
inline bool RecordingStatusRequest::filename() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingStatusRequest.filename)
  return filename_;
}
inline void RecordingStatusRequest::set_filename(bool value) {
  set_has_filename();
  filename_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingStatusRequest.filename)
}

// optional bool length = 4;
inline bool RecordingStatusRequest::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordingStatusRequest::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordingStatusRequest::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordingStatusRequest::clear_length() {
  length_ = false;
  clear_has_length();
}
inline bool RecordingStatusRequest::length() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingStatusRequest.length)
  return length_;
}
inline void RecordingStatusRequest::set_length(bool value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingStatusRequest.length)
}

// optional bool nsamples = 5;
inline bool RecordingStatusRequest::has_nsamples() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordingStatusRequest::set_has_nsamples() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordingStatusRequest::clear_has_nsamples() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordingStatusRequest::clear_nsamples() {
  nsamples_ = false;
  clear_has_nsamples();
}
inline bool RecordingStatusRequest::nsamples() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingStatusRequest.nsamples)
  return nsamples_;
}
inline void RecordingStatusRequest::set_nsamples(bool value) {
  set_has_nsamples();
  nsamples_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingStatusRequest.nsamples)
}

// optional bool nchannels = 6;
inline bool RecordingStatusRequest::has_nchannels() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordingStatusRequest::set_has_nchannels() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordingStatusRequest::clear_has_nchannels() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordingStatusRequest::clear_nchannels() {
  nchannels_ = false;
  clear_has_nchannels();
}
inline bool RecordingStatusRequest::nchannels() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingStatusRequest.nchannels)
  return nchannels_;
}
inline void RecordingStatusRequest::set_nchannels(bool value) {
  set_has_nchannels();
  nchannels_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingStatusRequest.nchannels)
}

// optional bool lastValidSample = 7;
inline bool RecordingStatusRequest::has_lastvalidsample() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordingStatusRequest::set_has_lastvalidsample() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordingStatusRequest::clear_has_lastvalidsample() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordingStatusRequest::clear_lastvalidsample() {
  lastvalidsample_ = false;
  clear_has_lastvalidsample();
}
inline bool RecordingStatusRequest::lastvalidsample() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingStatusRequest.lastValidSample)
  return lastvalidsample_;
}
inline void RecordingStatusRequest::set_lastvalidsample(bool value) {
  set_has_lastvalidsample();
  lastvalidsample_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingStatusRequest.lastValidSample)
}

// optional bool blockSize = 8;
inline bool RecordingStatusRequest::has_blocksize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordingStatusRequest::set_has_blocksize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordingStatusRequest::clear_has_blocksize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordingStatusRequest::clear_blocksize() {
  blocksize_ = false;
  clear_has_blocksize();
}
inline bool RecordingStatusRequest::blocksize() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingStatusRequest.blockSize)
  return blocksize_;
}
inline void RecordingStatusRequest::set_blocksize(bool value) {
  set_has_blocksize();
  blocksize_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingStatusRequest.blockSize)
}

// optional bool sampleRate = 9;
inline bool RecordingStatusRequest::has_samplerate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecordingStatusRequest::set_has_samplerate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecordingStatusRequest::clear_has_samplerate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecordingStatusRequest::clear_samplerate() {
  samplerate_ = false;
  clear_has_samplerate();
}
inline bool RecordingStatusRequest::samplerate() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingStatusRequest.sampleRate)
  return samplerate_;
}
inline void RecordingStatusRequest::set_samplerate(bool value) {
  set_has_samplerate();
  samplerate_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingStatusRequest.sampleRate)
}

// optional bool gain = 10;
inline bool RecordingStatusRequest::has_gain() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecordingStatusRequest::set_has_gain() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecordingStatusRequest::clear_has_gain() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecordingStatusRequest::clear_gain() {
  gain_ = false;
  clear_has_gain();
}
inline bool RecordingStatusRequest::gain() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingStatusRequest.gain)
  return gain_;
}
inline void RecordingStatusRequest::set_gain(bool value) {
  set_has_gain();
  gain_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingStatusRequest.gain)
}

// optional bool offset = 11;
inline bool RecordingStatusRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RecordingStatusRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RecordingStatusRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RecordingStatusRequest::clear_offset() {
  offset_ = false;
  clear_has_offset();
}
inline bool RecordingStatusRequest::offset() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingStatusRequest.offset)
  return offset_;
}
inline void RecordingStatusRequest::set_offset(bool value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingStatusRequest.offset)
}

// optional bool date = 12;
inline bool RecordingStatusRequest::has_date() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RecordingStatusRequest::set_has_date() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RecordingStatusRequest::clear_has_date() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RecordingStatusRequest::clear_date() {
  date_ = false;
  clear_has_date();
}
inline bool RecordingStatusRequest::date() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingStatusRequest.date)
  return date_;
}
inline void RecordingStatusRequest::set_date(bool value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingStatusRequest.date)
}

// optional bool time = 13;
inline bool RecordingStatusRequest::has_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RecordingStatusRequest::set_has_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RecordingStatusRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RecordingStatusRequest::clear_time() {
  time_ = false;
  clear_has_time();
}
inline bool RecordingStatusRequest::time() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingStatusRequest.time)
  return time_;
}
inline void RecordingStatusRequest::set_time(bool value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingStatusRequest.time)
}

// -------------------------------------------------------------------

// RecordingParamsReply

// required uint32 size = 1;
inline bool RecordingParamsReply::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordingParamsReply::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordingParamsReply::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordingParamsReply::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 RecordingParamsReply::size() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingParamsReply.size)
  return size_;
}
inline void RecordingParamsReply::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingParamsReply.size)
}

// optional string type = 2;
inline bool RecordingParamsReply::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordingParamsReply::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordingParamsReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordingParamsReply::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& RecordingParamsReply::type() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingParamsReply.type)
  return *type_;
}
inline void RecordingParamsReply::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:mearec.RecordingParamsReply.type)
}
inline void RecordingParamsReply::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:mearec.RecordingParamsReply.type)
}
inline void RecordingParamsReply::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mearec.RecordingParamsReply.type)
}
inline ::std::string* RecordingParamsReply::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mearec.RecordingParamsReply.type)
  return type_;
}
inline ::std::string* RecordingParamsReply::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecordingParamsReply::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mearec.RecordingParamsReply.type)
}

// optional string filename = 3;
inline bool RecordingParamsReply::has_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordingParamsReply::set_has_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordingParamsReply::clear_has_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordingParamsReply::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& RecordingParamsReply::filename() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingParamsReply.filename)
  return *filename_;
}
inline void RecordingParamsReply::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:mearec.RecordingParamsReply.filename)
}
inline void RecordingParamsReply::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:mearec.RecordingParamsReply.filename)
}
inline void RecordingParamsReply::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mearec.RecordingParamsReply.filename)
}
inline ::std::string* RecordingParamsReply::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mearec.RecordingParamsReply.filename)
  return filename_;
}
inline ::std::string* RecordingParamsReply::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecordingParamsReply::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mearec.RecordingParamsReply.filename)
}

// optional double length = 4;
inline bool RecordingParamsReply::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordingParamsReply::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordingParamsReply::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordingParamsReply::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double RecordingParamsReply::length() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingParamsReply.length)
  return length_;
}
inline void RecordingParamsReply::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingParamsReply.length)
}

// optional uint32 nsamples = 5;
inline bool RecordingParamsReply::has_nsamples() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordingParamsReply::set_has_nsamples() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordingParamsReply::clear_has_nsamples() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordingParamsReply::clear_nsamples() {
  nsamples_ = 0u;
  clear_has_nsamples();
}
inline ::google::protobuf::uint32 RecordingParamsReply::nsamples() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingParamsReply.nsamples)
  return nsamples_;
}
inline void RecordingParamsReply::set_nsamples(::google::protobuf::uint32 value) {
  set_has_nsamples();
  nsamples_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingParamsReply.nsamples)
}

// optional uint32 nchannels = 6;
inline bool RecordingParamsReply::has_nchannels() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordingParamsReply::set_has_nchannels() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordingParamsReply::clear_has_nchannels() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordingParamsReply::clear_nchannels() {
  nchannels_ = 0u;
  clear_has_nchannels();
}
inline ::google::protobuf::uint32 RecordingParamsReply::nchannels() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingParamsReply.nchannels)
  return nchannels_;
}
inline void RecordingParamsReply::set_nchannels(::google::protobuf::uint32 value) {
  set_has_nchannels();
  nchannels_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingParamsReply.nchannels)
}

// optional uint32 lastValidSample = 7;
inline bool RecordingParamsReply::has_lastvalidsample() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordingParamsReply::set_has_lastvalidsample() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordingParamsReply::clear_has_lastvalidsample() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordingParamsReply::clear_lastvalidsample() {
  lastvalidsample_ = 0u;
  clear_has_lastvalidsample();
}
inline ::google::protobuf::uint32 RecordingParamsReply::lastvalidsample() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingParamsReply.lastValidSample)
  return lastvalidsample_;
}
inline void RecordingParamsReply::set_lastvalidsample(::google::protobuf::uint32 value) {
  set_has_lastvalidsample();
  lastvalidsample_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingParamsReply.lastValidSample)
}

// optional uint32 blockSize = 8;
inline bool RecordingParamsReply::has_blocksize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordingParamsReply::set_has_blocksize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordingParamsReply::clear_has_blocksize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordingParamsReply::clear_blocksize() {
  blocksize_ = 0u;
  clear_has_blocksize();
}
inline ::google::protobuf::uint32 RecordingParamsReply::blocksize() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingParamsReply.blockSize)
  return blocksize_;
}
inline void RecordingParamsReply::set_blocksize(::google::protobuf::uint32 value) {
  set_has_blocksize();
  blocksize_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingParamsReply.blockSize)
}

// optional float sampleRate = 9;
inline bool RecordingParamsReply::has_samplerate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecordingParamsReply::set_has_samplerate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecordingParamsReply::clear_has_samplerate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecordingParamsReply::clear_samplerate() {
  samplerate_ = 0;
  clear_has_samplerate();
}
inline float RecordingParamsReply::samplerate() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingParamsReply.sampleRate)
  return samplerate_;
}
inline void RecordingParamsReply::set_samplerate(float value) {
  set_has_samplerate();
  samplerate_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingParamsReply.sampleRate)
}

// optional float gain = 10;
inline bool RecordingParamsReply::has_gain() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecordingParamsReply::set_has_gain() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecordingParamsReply::clear_has_gain() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecordingParamsReply::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
inline float RecordingParamsReply::gain() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingParamsReply.gain)
  return gain_;
}
inline void RecordingParamsReply::set_gain(float value) {
  set_has_gain();
  gain_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingParamsReply.gain)
}

// optional float offset = 11;
inline bool RecordingParamsReply::has_offset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RecordingParamsReply::set_has_offset() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RecordingParamsReply::clear_has_offset() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RecordingParamsReply::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline float RecordingParamsReply::offset() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingParamsReply.offset)
  return offset_;
}
inline void RecordingParamsReply::set_offset(float value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:mearec.RecordingParamsReply.offset)
}

// optional string date = 12;
inline bool RecordingParamsReply::has_date() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RecordingParamsReply::set_has_date() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RecordingParamsReply::clear_has_date() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RecordingParamsReply::clear_date() {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_->clear();
  }
  clear_has_date();
}
inline const ::std::string& RecordingParamsReply::date() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingParamsReply.date)
  return *date_;
}
inline void RecordingParamsReply::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(value);
  // @@protoc_insertion_point(field_set:mearec.RecordingParamsReply.date)
}
inline void RecordingParamsReply::set_date(const char* value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(value);
  // @@protoc_insertion_point(field_set_char:mearec.RecordingParamsReply.date)
}
inline void RecordingParamsReply::set_date(const char* value, size_t size) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mearec.RecordingParamsReply.date)
}
inline ::std::string* RecordingParamsReply::mutable_date() {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mearec.RecordingParamsReply.date)
  return date_;
}
inline ::std::string* RecordingParamsReply::release_date() {
  clear_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecordingParamsReply::set_allocated_date(::std::string* date) {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_;
  }
  if (date) {
    set_has_date();
    date_ = date;
  } else {
    clear_has_date();
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mearec.RecordingParamsReply.date)
}

// optional string time = 13;
inline bool RecordingParamsReply::has_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RecordingParamsReply::set_has_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RecordingParamsReply::clear_has_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RecordingParamsReply::clear_time() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& RecordingParamsReply::time() const {
  // @@protoc_insertion_point(field_get:mearec.RecordingParamsReply.time)
  return *time_;
}
inline void RecordingParamsReply::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:mearec.RecordingParamsReply.time)
}
inline void RecordingParamsReply::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:mearec.RecordingParamsReply.time)
}
inline void RecordingParamsReply::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mearec.RecordingParamsReply.time)
}
inline ::std::string* RecordingParamsReply::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mearec.RecordingParamsReply.time)
  return time_;
}
inline ::std::string* RecordingParamsReply::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecordingParamsReply::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mearec.RecordingParamsReply.time)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mearec

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mearec::RecordingParamsReply_StatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mearec::RecordingParamsReply_StatusType>() {
  return ::mearec::RecordingParamsReply_StatusType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logserver_2eproto__INCLUDED
